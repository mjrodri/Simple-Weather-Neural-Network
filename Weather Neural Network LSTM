import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Generate or load historical weather data (replace this with your actual data)
# Assume a dataset with features like temperature, humidity, wind speed, etc.
# Each row represents a timestamp, and columns are different features.
# The target variable is the variable you want to predict (e.g., temperature tomorrow).
# For simplicity, let's use a random dataset here.

np.random.seed(42)

# Generate a random dataset for demonstration
data_size = 100
temperature = np.random.uniform(20, 30, size=(data_size, 1))
humidity = np.random.uniform(40, 70, size=(data_size, 1))
wind_speed = np.random.uniform(0, 10, size=(data_size, 1))
target_variable = np.random.uniform(15, 25, size=(data_size, 1))

# Create a DataFrame
df = pd.DataFrame(np.hstack([temperature, humidity, wind_speed, target_variable]),
                  columns=['Temperature', 'Humidity', 'WindSpeed', 'TargetVariable'])

# Normalize the data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df.values)

# Create sequences for time-series prediction
sequence_length = 10
X, y = [], []

for i in range(len(scaled_data) - sequence_length):
    X.append(scaled_data[i:i+sequence_length, :-1])
    y.append(scaled_data[i+sequence_length, -1])

X, y = np.array(X), np.array(y)

# Split the data into training and testing sets
train_size = int(len(X) * 0.8)
X_train, X_test, y_train, y_test = X[:train_size], X[train_size:], y[:train_size], y[train_size:]

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.1)

# Make predictions on the test set
predictions = model.predict(X_test)

# Inverse transform the predictions and actual values
predictions = scaler.inverse_transform(np.hstack([X_test[:, -1, :-1], predictions.reshape(-1, 1)]))[:, -1]
actual_values = scaler.inverse_transform(np.hstack([X_test[:, -1, :-1], y_test.reshape(-1, 1)]))[:, -1]

# Evaluate the model
mae = mean_absolute_error(actual_values, predictions)
print(f'Mean Absolute Error: {mae}')

# Visualize the results
plt.plot(actual_values, label='Actual')
plt.plot(predictions, label='Predicted')
plt.legend()
plt.show()
